module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMessage {
  count: Int!
}

type AggregateProfilePicture {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  body: String!
  postedBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  body: String!
  postedBy: UserCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutPostedByInput {
  create: [MessageCreateWithoutPostedByInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutPostedByInput {
  id: ID
  body: String!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  body: String
  postedBy: UserUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  body: String
}

input MessageUpdateManyMutationInput {
  body: String
}

input MessageUpdateManyWithoutPostedByInput {
  create: [MessageCreateWithoutPostedByInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutPostedByDataInput {
  body: String
}

input MessageUpdateWithWhereUniqueWithoutPostedByInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutPostedByDataInput!
}

input MessageUpsertWithWhereUniqueWithoutPostedByInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutPostedByDataInput!
  create: MessageCreateWithoutPostedByInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  postedBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createProfilePicture(data: ProfilePictureCreateInput!): ProfilePicture!
  updateProfilePicture(data: ProfilePictureUpdateInput!, where: ProfilePictureWhereUniqueInput!): ProfilePicture
  updateManyProfilePictures(data: ProfilePictureUpdateManyMutationInput!, where: ProfilePictureWhereInput): BatchPayload!
  upsertProfilePicture(where: ProfilePictureWhereUniqueInput!, create: ProfilePictureCreateInput!, update: ProfilePictureUpdateInput!): ProfilePicture!
  deleteProfilePicture(where: ProfilePictureWhereUniqueInput!): ProfilePicture
  deleteManyProfilePictures(where: ProfilePictureWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProfilePicture {
  id: ID!
  user: User!
  src: String!
}

type ProfilePictureConnection {
  pageInfo: PageInfo!
  edges: [ProfilePictureEdge]!
  aggregate: AggregateProfilePicture!
}

input ProfilePictureCreateInput {
  id: ID
  user: UserCreateOneWithoutProfilePictureInput!
  src: String!
}

input ProfilePictureCreateOneWithoutUserInput {
  create: ProfilePictureCreateWithoutUserInput
  connect: ProfilePictureWhereUniqueInput
}

input ProfilePictureCreateWithoutUserInput {
  id: ID
  src: String!
}

type ProfilePictureEdge {
  node: ProfilePicture!
  cursor: String!
}

enum ProfilePictureOrderByInput {
  id_ASC
  id_DESC
  src_ASC
  src_DESC
}

type ProfilePicturePreviousValues {
  id: ID!
  src: String!
}

type ProfilePictureSubscriptionPayload {
  mutation: MutationType!
  node: ProfilePicture
  updatedFields: [String!]
  previousValues: ProfilePicturePreviousValues
}

input ProfilePictureSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfilePictureWhereInput
  AND: [ProfilePictureSubscriptionWhereInput!]
  OR: [ProfilePictureSubscriptionWhereInput!]
  NOT: [ProfilePictureSubscriptionWhereInput!]
}

input ProfilePictureUpdateInput {
  user: UserUpdateOneRequiredWithoutProfilePictureInput
  src: String
}

input ProfilePictureUpdateManyMutationInput {
  src: String
}

input ProfilePictureUpdateOneWithoutUserInput {
  create: ProfilePictureCreateWithoutUserInput
  update: ProfilePictureUpdateWithoutUserDataInput
  upsert: ProfilePictureUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfilePictureWhereUniqueInput
}

input ProfilePictureUpdateWithoutUserDataInput {
  src: String
}

input ProfilePictureUpsertWithoutUserInput {
  update: ProfilePictureUpdateWithoutUserDataInput!
  create: ProfilePictureCreateWithoutUserInput!
}

input ProfilePictureWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  src: String
  src_not: String
  src_in: [String!]
  src_not_in: [String!]
  src_lt: String
  src_lte: String
  src_gt: String
  src_gte: String
  src_contains: String
  src_not_contains: String
  src_starts_with: String
  src_not_starts_with: String
  src_ends_with: String
  src_not_ends_with: String
  AND: [ProfilePictureWhereInput!]
  OR: [ProfilePictureWhereInput!]
  NOT: [ProfilePictureWhereInput!]
}

input ProfilePictureWhereUniqueInput {
  id: ID
}

type Query {
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  profilePicture(where: ProfilePictureWhereUniqueInput!): ProfilePicture
  profilePictures(where: ProfilePictureWhereInput, orderBy: ProfilePictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfilePicture]!
  profilePicturesConnection(where: ProfilePictureWhereInput, orderBy: ProfilePictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfilePictureConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  profilePicture(where: ProfilePictureSubscriptionWhereInput): ProfilePictureSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  username: String!
  profilePicture: ProfilePicture
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  username: String!
  profilePicture: ProfilePictureCreateOneWithoutUserInput
  messages: MessageCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfilePictureInput {
  create: UserCreateWithoutProfilePictureInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMessagesInput {
  id: ID
  email: String!
  password: String!
  username: String!
  profilePicture: ProfilePictureCreateOneWithoutUserInput
}

input UserCreateWithoutProfilePictureInput {
  id: ID
  email: String!
  password: String!
  username: String!
  messages: MessageCreateManyWithoutPostedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  username: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  username: String
  profilePicture: ProfilePictureUpdateOneWithoutUserInput
  messages: MessageUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  username: String
}

input UserUpdateOneRequiredWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProfilePictureInput {
  create: UserCreateWithoutProfilePictureInput
  update: UserUpdateWithoutProfilePictureDataInput
  upsert: UserUpsertWithoutProfilePictureInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMessagesDataInput {
  email: String
  password: String
  username: String
  profilePicture: ProfilePictureUpdateOneWithoutUserInput
}

input UserUpdateWithoutProfilePictureDataInput {
  email: String
  password: String
  username: String
  messages: MessageUpdateManyWithoutPostedByInput
}

input UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserUpsertWithoutProfilePictureInput {
  update: UserUpdateWithoutProfilePictureDataInput!
  create: UserCreateWithoutProfilePictureInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  profilePicture: ProfilePictureWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    